name: llama32-1b-pt

compute:
  cluster: r8z11
  gpus: 8  # Number of GPUs to use

image: mosaicml/llm-foundry:2.4.0_cu124-latest

integrations:
- integration_type: git_repo
  git_repo: mosaicml/llm-foundry
  git_branch: v0.13.0
  pip_install: .[gpu,databricks]
  ssh_clone: false  # Should be true if using a private repo
# - integration_type: mlflow
#   tracking_uri: databricks
#   experiment_name: /Users/hiroshi.ouchiyama@databricks.com/mct_experiment_llama31

command: |
  cd llm-foundry/scripts
  composer train/train.py /mnt/config/parameters.yaml

# The below is injected as a YAML file: /mnt/config/parameters.yaml
parameters:
  run_name:  # If left blank, will be read from env var $RUN_NAME
  max_split_size_mb: 512
  max_seq_len: 4096  

  variables:
    global_seed: 17
    data_local: ./train_dataset
    # data_remote: dbfs:/Volumes/shared/hiouchiymct/dataset/my-copy-shakespeare

  # Model
  model:
    name: hf_causal_lm
    init_device: mixed
    pretrained_model_name_or_path: meta-llama/Llama-3.2-1B #meta-llama/Llama-3.1-8B
    pretrained: true
    # Note: you must have set the HF_TOKEN environment variable and have access to the llama3.1 models
    use_auth_token: true
    use_flash_attention_2: true

  # Tokenizer
  tokenizer:
    name: meta-llama/Llama-3.2-1B #meta-llama/Llama-3.1-8B
    kwargs:
      model_max_length: ${max_seq_len}
      trust_remote_code: true

  # Dataloaders
  train_loader:
    name: finetuning
    dataset:
      hf_name: kunishou/databricks-dolly-15k-ja
      preprocessing_fn: llmfoundry.data.finetuning.tasks:dolly_preprocessing_function
      split: train
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      shuffle: true
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  eval_loader:
    name: finetuning
    dataset:
      hf_name: kunishou/databricks-dolly-15k-ja
      preprocessing_fn: llmfoundry.data.finetuning.tasks:dolly_preprocessing_function
      split: train
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      shuffle: false
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  # Optimization
  scheduler:
    name: cosine_with_warmup
    t_warmup: 100ba
    alpha_f: 0.1

  # Note: You may want to change learning rate, betas, weight decay
  optimizer:
    name: decoupled_lionw
    lr: 5.0e-7
    betas:
    - 0.9
    - 0.95
    weight_decay: 0.0

  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  max_duration: 20ba
  eval_first: false
  eval_interval: 5ba
  eval_subset_num_batches: -1
  global_train_batch_size: 16

  # System
  seed: ${variables.global_seed}
  device_eval_batch_size: 4
  device_train_microbatch_size: 2
  precision: amp_bf16

  # FSDP
  fsdp_config:
    sharding_strategy: FULL_SHARD
    state_dict_type: sharded
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true

  # Logging
  progress_bar: false
  log_to_console: true
  console_log_interval: 1ba

  callbacks:
    speed_monitor:
      window_size: 10
    lr_monitor: {}
    memory_monitor: {}
    runtime_estimator: {}
    # hf_checkpointer:
    #   overwrite: true
    #   precision: bfloat16
    #   save_folder: dbfs:/databricks/mlflow-tracking/{mlflow_experiment_id}/{mlflow_run_id}/artifacts/checkpoints
    #   save_interval: 5ba
    #   mlflow_logging_config:
    #     task: llm/v1/chat
    #     metadata:
    #       task: llm/v1/chat
    #   mlflow_registered_model_name: llama32-1b-hiouchiy

  load_weights_only: true  # Only load the weights, not the optimizer state, LR schedule, etc

  # loggers:
  #   mlflow:
  #     tracking_uri: databricks
  #     model_registry_uri: databricks-uc
  #     model_registry_prefix: shared.hiouchiymct

  # loggers:
  #   wandb: {}

  # Checkpoint to local filesystem or remote object store
  # save_interval: 2000ba
  # save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
  # save_folder: ./{run_name}/checkpoints
  # save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints
  # save_interval: 5ba
  # save_folder: dbfs:/databricks/mlflow-tracking/{mlflow_experiment_id}/{mlflow_run_id}/artifacts/{run_name}/checkpoints

  # Load a checkpoint file from local filesystem or remote object store
  # load_path: ./gpt-1b/checkpoints/latest-rank{rank}.pt
  # load_path: s3://my-bucket/my-folder/gpt-1b/checkpoints/latest-rank{rank}.pt
  # load_path: dbfs:/databricks/mlflow-tracking/1322175094395138/5c4432788793429bb9403ecad312d5f9/artifacts/mpt-1b-quickstart-llm-foundry-DA2Edb/checkpoints/ep0-ba3-rank0.pt